// <auto-generated />
using System;
using Clean.WinF.Infrastructure.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clean.WinF.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20231112161105_ModifyUserGroupTable")]
    partial class ModifyUserGroupTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Article", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AutomatID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BacktackEndSeam1Backward")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackEndSeam1Forward")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackEndSeam1Repetition")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackEndSeam2Backward")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackEndSeam2Forward")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackEndSeam2Repetition")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackStartSeam1Backward")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackStartSeam1Forward")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackStartSeam1Repetition")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackStartSeam2Backward")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackStartSeam2Forward")
                        .HasColumnType("TEXT");

                    b.Property<string>("BacktackStartSeam2Repetition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Endlabel")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndlabelSeamMaxStiche")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndlabelSeamSL")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndlabelSeamSteps")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndlabelStepsBack")
                        .HasColumnType("TEXT");

                    b.Property<string>("FabricLeather1Batch")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FabricLeather1ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FabricLeather1MaterialCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("FabricLeather1MaterialName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FabricLeather2Batch")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FabricLeather2ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FabricLeather2MaterialCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("FabricLeather2MaterialName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FabricLeather3Batch")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FabricLeather3ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FabricLeather3MaterialCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("FabricLeather3MaterialName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FabricLeather4Batch")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FabricLeather4ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FabricLeather4MaterialCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("FabricLeather4MaterialName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FabricLeather5Batch")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FabricLeather5ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FabricLeather5MaterialCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("FabricLeather5MaterialName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FreeSeamCountStart")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelDefinition")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LowerThreadID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LowerThreadInfo1")
                        .HasColumnType("TEXT");

                    b.Property<string>("LowerThreadInfo2")
                        .HasColumnType("TEXT");

                    b.Property<string>("LowerThreadMaterialCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("LowerThreadMaterialName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaxSpeedCritSection")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaxSpeedNotCritSection")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaxStitchesFreeSeam")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiscellaneousInfo1")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiscellaneousInfo2")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiscellaneousInfo3")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiscellaneousInfo4")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiscellaneousInfo5")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiscellaneousInfo6")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiscellaneousInfo7")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SeamEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("SeamProfile")
                        .HasColumnType("TEXT");

                    b.Property<string>("SeamStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section1Max")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section1Min")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section1Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section1SL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section1StepBackw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section1StepForw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section1Steps")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section1StitchLength")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Section1TolErrAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Section2Max")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section2Min")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section2Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section2SL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section2StepBackw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section2StepForw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section2Steps")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section2StitchLength")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Section2TolErrAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Section3Max")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section3Min")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section3Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section3SL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section3StepBackw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section3StepForw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section3Steps")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section3StitchLength")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Section3TolErrAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Section4Max")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section4Min")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section4Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section4SL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section4StepBackw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section4StepForw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section4Steps")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section4StitchLength")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Section4TolErrAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Section5Max")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section5Min")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section5Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section5SL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section5StepBackw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section5StepForw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section5Steps")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section5StitchLength")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Section5TolErrAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SewingMachineParameterID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StitchLength")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionMonitoringType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionSeam1Max")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionSeam1Min")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionSeam1Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionSeam1StartMonitoring")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionSeam1StopFilter")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionSeam2Max")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionSeam2Min")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionSeam2Reference")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionSeam2StartMonitoring")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadTensionSeam2StopFilter")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UpperThreadID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpperThreadInfo1")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpperThreadInfo2")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpperThreadMaterialCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpperThreadMaterialName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AutomatID");

                    b.HasIndex("SewingMachineParameterID")
                        .IsUnique();

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Automat", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllocationToAnArticleIsPossible")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ArticleCodeExactLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArticleCodeMaxLength")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoTolCrit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AutoTolCritText")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoTolNotCrit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AutoTolNotCritText")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Custom")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ETM14600")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ETM14600ValuesAreEditable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ETM422")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableStitchLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnableStitchLengthMax")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnableStitchLengthMin")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ExactLength1")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExactLength2")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExactLength3")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExactLength4")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExactLength5")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExactLength6")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExactLength7")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Info1")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Info2")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Info3")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Info4")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Info5")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Info6")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Info7")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LabelText1")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelText2")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelText3")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelText4")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelText5")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelText6")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelText7")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LowerThread")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("OneCriticalSectionNoSeamsWithEndLabel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OneCriticalSectionNoSeamsWithFLPart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OneCriticalSectionTwoSeamsWithEndLabel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OneCriticalSectionTwoSeamsWithEndLabelBehind")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OneCriticalSectionTwoSeamsWithFLPart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OneCriticalSectionTwoSeamsWithTwoEndLabel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Part1")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Part2")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Part3")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Part4")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Part5")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PrintArticleLabelEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ThreeCriticalSectionFourSeamsWithEndLabel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ThreeCriticalSectionFourSeamsWithEndLabelBehind")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ThreeCriticalSectionFourSeamsWithFLPart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ThreeCriticalSectionFourSeamsWithTwoEndLabel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ThreeCriticalSectionTwoSeamsWithEndLabel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ThreeCriticalSectionTwoSeamsWithFLPart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoCriticalSectionFourSeamsWithEndLabel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoCriticalSectionFourSeamsWithEndLabelBehind")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoCriticalSectionFourSeamsWithFLPart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoCriticalSectionFourSeamsWithTwoEndLabel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UpperThread")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Automat");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Bobbin", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BobbinLabel")
                        .HasColumnType("TEXT");

                    b.Property<int>("BobbinNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Machine")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreadLabel")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Bobbin", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Computer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Computer", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Languages.AppCodeGUIDefinition", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodeGUI")
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeGroupGUI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObjectType")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("AppCodeGUIDefinition", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Languages.AppGroupGUIDefinition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodeGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("AppGroupGUIDefinition", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Languages.ApplicationDefinition", b =>
                {
                    b.Property<int>("AppID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("AppID");

                    b.ToTable("AppDefinition", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Languages.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconImg")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lang")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Log.DBLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<string>("RenderedMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DBLog", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Menus.Menu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Desciption")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconImg")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Order", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArticleCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArticleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderNo")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SABLabel")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Part", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Info1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Info2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Info3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Info4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Info5")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LabelDefinition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SABLabel")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Part", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Protocol", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndLabe2Seamed")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EndLabelSeamed1")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SeamDetailStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SeamOK")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchesCrit1")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchesCrit2")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchesCrit3")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchesNotCrit1")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchesNotCrit2")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchesNotCrit4")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Protocol", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Report", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComputerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComputerName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ComputersID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageBiasysControl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LanguageBiasysDB")
                        .HasColumnType("TEXT");

                    b.Property<string>("PathOfBiasysControl")
                        .HasColumnType("TEXT");

                    b.Property<string>("PathOfProtocolDB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Port")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ComputersID");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.SewingMachine.ChangeOfNeedlesRecords", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StitchCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("ChangeOfNeedlesRecords", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.SewingMachine.ClipSenSorActivation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("ClipSenSorActivation", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.SewingMachine.SewingMachineConfiguration", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ActivatedFootLiftinCriticalSection")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlternativeMachine")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClipSensorActivationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxNoStitchesPerNeedles")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OnAfterMinStitchesminusXStitch")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("SewingMachineConfiguration", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.SewingMachineParameter", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ArticleID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriticalSection")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaxTolerance")
                        .HasColumnType("TEXT");

                    b.Property<string>("MinTolerance")
                        .HasColumnType("TEXT");

                    b.Property<string>("NonCriticalSection")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceTension")
                        .HasColumnType("TEXT");

                    b.Property<string>("RepetitionSeam1End")
                        .HasColumnType("TEXT");

                    b.Property<string>("RepetitionSeam1Front")
                        .HasColumnType("TEXT");

                    b.Property<string>("RepetitionSeam2End")
                        .HasColumnType("TEXT");

                    b.Property<string>("RepetitionSeam2Front")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartMonitoring")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchBackwardSeam1End")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchBackwardSeam1Front")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchBackwardSeam2End")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchBackwardSeam2Front")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchForwardSeam1End")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchForwardSeam1Front")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchForwardSeam2End")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchForwardSeam2Front")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchLength")
                        .HasColumnType("TEXT");

                    b.Property<string>("StopFilter")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("SewingMachineParameter");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Supplier", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Place")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.SystemConfiguration", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FeatureKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Permission")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("SystemConfiguration", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Thread", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BobbinThread")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Colour")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedleThread")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("WindingParameterName")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Thread", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Users.Permission", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Users.Role", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FingerDataAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstFinger")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LoginAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleID")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondFinger")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThirdFinger")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("WinAccount01")
                        .HasColumnType("TEXT");

                    b.Property<string>("WinAccount02")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Users.UserGroup", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsExecute")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsInsert")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PermissionID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RoleID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("RoleID");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.WindingParamter", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BobbinThread")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedleThread")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<string>("StitchesOnFullBobbin")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("WindingDurationOnMachine")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("WindingParamter", (string)null);
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Article", b =>
                {
                    b.HasOne("Clean.WinF.Domain.Entities.Automat", "Automat")
                        .WithMany("Articles")
                        .HasForeignKey("AutomatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.WinF.Domain.Entities.SewingMachineParameter", "SewingMachineParameter")
                        .WithOne("Article")
                        .HasForeignKey("Clean.WinF.Domain.Entities.Article", "SewingMachineParameterID");

                    b.Navigation("Automat");

                    b.Navigation("SewingMachineParameter");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Setting", b =>
                {
                    b.HasOne("Clean.WinF.Domain.Entities.Computer", "Computers")
                        .WithMany()
                        .HasForeignKey("ComputersID");

                    b.Navigation("Computers");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Users.UserGroup", b =>
                {
                    b.HasOne("Clean.WinF.Domain.Entities.Users.Permission", "Permission")
                        .WithMany("UserGroups")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.WinF.Domain.Entities.Users.Role", "Role")
                        .WithMany("UserGroups")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Automat", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.SewingMachineParameter", b =>
                {
                    b.Navigation("Article");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Users.Permission", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Clean.WinF.Domain.Entities.Users.Role", b =>
                {
                    b.Navigation("UserGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
